<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xinri.dao.role.RoleUserGroupsMapper">
	<resultMap id="roleUserGroupsResultMap" type="com.xinri.po.role.RoleUserGroups">
	      	<result column="ROLE_ID" property="roleId" jdbcType="BIGINT"/>
	      	<result column="USER_GROUP_ID" property="userGroupId" jdbcType="BIGINT"/>
	</resultMap>

    <!-- 列定义 -->
	<sql id="roleUserGroupsColumns">
	  t.ROLE_ID,
	  t.USER_GROUP_ID
  	</sql>

    <!-- 查询条件SQL -->
	<sql id="whereColumnBySelect">
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<if test="roleId != null">
				AND t.ROLE_ID = #{roleId}
			</if>
			<if test="userGroupId != null">
				AND t.USER_GROUP_ID = #{userGroupId}
			</if>
		</trim>
	</sql>

    <!-- 修改字段SQL -->
	<sql id="whereColumnByUpdate">
		<trim prefix="SET" suffixOverrides=",">
			<if test="roleId != null">
			t.ROLE_ID = #{roleId},
			</if>
			<if test="userGroupId != null">
			t.USER_GROUP_ID = #{userGroupId},
			</if>
		</trim>
	</sql>

    <!-- 根据主键ID获取数据 -->
	<select id="get" parameterType="com.xinri.po.role.RoleUserGroups" resultMap="roleUserGroupsResultMap">
		SELECT <include refid="roleUserGroupsColumns" /> 
		FROM ROLE_USER_GROUPS t 
		WHERE t.ROLE_ID = #{roleId}
	</select>
    <!-- 查询列表可以根据分页进行查询 -->
	<select id="findList" parameterType="com.xinri.po.role.RoleUserGroups" resultMap="roleUserGroupsResultMap">
		SELECT
		<include refid="roleUserGroupsColumns" /> 
		FROM ROLE_USER_GROUPS t 
		<include refid="whereColumnBySelect" />
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}			
			</when>
				<otherwise>
				ORDER BY t.ROLE_ID DESC
				</otherwise>
			
		</choose>
	</select>

    <!-- 查询所有列表 -->
	<select id="findAllList" parameterType="com.xinri.po.role.RoleUserGroups" resultMap="roleUserGroupsResultMap">
		SELECT
		<include refid="roleUserGroupsColumns" /> 
		FROM ROLE_USER_GROUPS t 	
		<include refid="whereColumnBySelect" />
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}			
			</when>
				<otherwise>
				ORDER BY  t.ID DESC
				</otherwise>
			
		</choose>
		
		
	</select>

    <!-- 根据条件查询对象 -->
	<select id="getByEntity" parameterType="com.xinri.po.role.RoleUserGroups" resultMap="roleUserGroupsResultMap">
		SELECT <include refid="roleUserGroupsColumns" /> 
		FROM ROLE_USER_GROUPS t 
		<include refid="whereColumnBySelect"></include>
	</select>
	
    <!-- 新增并设置主键ID至参数对象 -->
	<insert id="insert" parameterType="com.xinri.po.role.RoleUserGroups">

		INSERT INTO ROLE_USER_GROUPS
			(ROLE_ID, USER_GROUP_ID)
		VALUES
			(#{roleId}, #{userGroupId})
	</insert>
    <!-- 新增并设置主键ID判断哪些列不为空时，则进行插入 -->
	<insert id="insertSelective" parameterType="com.xinri.po.role.RoleUserGroups" useGeneratedKeys="true" keyProperty="id" >
		
	    INSERT INTO ROLE_USER_GROUPS
	    <trim prefix="(" suffix=")" suffixOverrides="," >
			<if test="roleId != null">
				ROLE_ID,
			</if>
			<if test="userGroupId != null">
				USER_GROUP_ID,
			</if>
	    </trim>
	    <trim prefix="values (" suffix=")" suffixOverrides="," >
		  <if test="roleId != null">
				#{roleId,jdbcType=BIGINT},
		  </if>
		  <if test="userGroupId != null">
				#{userGroupId,jdbcType=BIGINT},
		  </if>
	    </trim>
  	</insert>

    <!-- 根据主键ID进行修改 -->
  	<update id="update" parameterType="com.xinri.po.role.RoleUserGroups">
		UPDATE ROLE_USER_GROUPS t 
		<include refid="whereColumnByUpdate"></include>
		<where>
			t.ROLE_ID = #{roleId,jdbcType=BIGINT}
		</where>
	</update>

    <!-- 根据条件进行修改 -->
	<update id="updateByCondition" parameterType="com.xinri.po.role.RoleUserGroups">
		UPDATE ROLE_USER_GROUPS t 
		<include refid="whereColumnByUpdate"></include>
		<where>${whereSqlParam}</where>
	</update>

    <!-- 根据主键ID进行逻辑删除 -->
	<update id="delete" parameterType="com.xinri.po.role.RoleUserGroups">
		UPDATE ROLE_USER_GROUPS t SET 
		t.IS_DELETED = 1
		WHERE t.ROLE_ID = #{roleId,jdbcType=BIGINT}
	</update>

    <!-- 根据主键ID进行批量逻辑删除 -->
	<update id="batchDelete" parameterType="java.util.List">
		UPDATE ROLE_USER_GROUPS t SET 
		t.IS_DELETED = 1
		WHERE t.ROLE_ID IN
		<foreach item="item" collection="list" index="index" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</update>

    <!-- 根据条件进行逻辑删除 -->
	<update id="deleteByEntity" parameterType="com.xinri.po.role.RoleUserGroups">
		UPDATE ROLE_USER_GROUPS t SET 
			t.IS_DELETED = 1
		<include refid="whereColumnBySelect"/>
	</update>

    <!-- 根据主键ID进行物理删除 -->
	<delete id="remove" parameterType="com.xinri.po.role.RoleUserGroups">
		DELETE FROM ROLE_USER_GROUPS t 
		WHERE t.ROLE_ID = #{roleId,jdbcType=BIGINT}
	</delete>

    <!-- 根据主键ID进行批量物理删除 -->
	<delete id="batchRemove" parameterType="java.util.List">
		DELETE FROM ROLE_USER_GROUPS t 
		WHERE t.ROLE_ID IN
		<foreach item="item" collection="list" index="index" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</delete>

    <!-- 根据条件进行物理删除 -->
	<update id="removeByCondition" parameterType="com.xinri.po.role.RoleUserGroups">
		DELETE FROM ROLE_USER_GROUPS t 
		<where>${whereSqlParam}</where>
	</update>

	<sql id="userGroupsColumns">
	  t.ID,
	  t.NAME,
	  t.CODE,
	  t.IS_DELETED,
	  t.DESCR,
	  t.GUID_ID,
	  t.IS_EFFECTIVE,
	  t.EFFECTIVE_DATE_START,
	  t.EFFECTIVE_DATE_END,
	  t.CREATED_ON,
	  t.CREATED_BY,
	  t.MODIFIED_ON,
	  t.MODIFIED_BY,
	  t.DESC_FLEX_FIELD1,
	  t.DESC_FLEX_FIELD2,
	  t.DESC_FLEX_FIELD3,
	  t.DESC_FLEX_FIELD4,
	  t.DESC_FLEX_FIELD5,
	  t.DESC_FLEX_FIELD6
  	</sql>

	<!-- 根据主键ID获取数据 -->
	<select id="findGroupNotInRoleId" parameterType="com.xinri.po.user.UserGroups" resultMap="com.xinri.dao.user.UserGroupsMapper.userGroupsResultMap">
		SELECT <include refid="userGroupsColumns" />
		from user_groups t
		where id
		not in(
			select user_group_id
			from role_user_groups
			where role_id = #{roleId}
		)
		<if test="name != null and name != ''">
			AND t.NAME LIKE '${name}'
		</if>
		<if test="code != null and code != ''">
			AND t.CODE LIKE '${code}'
		</if>
		<if test="descr != null and descr != ''">
			AND t.DESCR LIKE '${descr}'
		</if>
			AND t.is_deleted=0
			AND t.is_effective=1
		order by t.modified_on,t.id DESC
	</select>

	<select id="findGroupByRoleId" parameterType="com.xinri.po.user.UserGroups" resultMap="com.xinri.dao.user.UserGroupsMapper.userGroupsResultMap">
		SELECT <include refid="userGroupsColumns" />
		from user_groups t
		where id
		in(
			select user_group_id
			from role_user_groups
			where role_id = #{roleId}
		)
		<if test="name != null and name != ''">
			AND t.NAME LIKE '${name}'
		</if>
		<if test="code != null and code != ''">
			AND t.CODE LIKE '${code}'
		</if>
		<if test="descr != null and descr != ''">
			AND t.DESCR LIKE '${descr}'
		</if>
		AND t.is_deleted=0
		AND t.is_effective=1
		order by t.modified_on,t.id DESC
	</select>

	<delete id="removeByEntity" parameterType="com.xinri.po.role.RoleUserGroups">
		delete FROM ROLE_USER_GROUPS
		WHERE
		ROLE_ID = #{roleId}
		AND
		USER_GROUP_ID = #{userGroupId}
	</delete>
	

</mapper>