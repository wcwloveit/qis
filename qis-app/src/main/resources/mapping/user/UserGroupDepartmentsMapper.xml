<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xinri.dao.user.UserGroupDepartmentsMapper">
	<resultMap id="userGroupDepartmentsResultMap" type="com.xinri.po.user.UserGroupDepartments">
	      	<result column="USER_GROUP_ID" property="userGroupId" jdbcType="BIGINT"/>
	      	<result column="DEPARTMENT_ID" property="departmentId" jdbcType="BIGINT"/>
	</resultMap>

	<resultMap id="departmentsResultMap" type="com.xinri.po.departments.Departments">
		<id column="ID" property="id" jdbcType="BIGINT"/>
		<result column="NAME" property="name" jdbcType="VARCHAR"/>
		<result column="CODE" property="code" jdbcType="VARCHAR"/>
		<result column="PARENT_DEPARTMENT_ID" property="parentDepartmentId" jdbcType="BIGINT"/>
		<result column="ORGANIZATION_ID" property="organizationId" jdbcType="BIGINT"/>
		<result column="OA_NO" property="oaNo" jdbcType="VARCHAR"/>
		<result column="OA_ID" property="oaId" jdbcType="VARCHAR"/>
		<result column="OA_CANCELED" property="oaCanceled" jdbcType="VARCHAR"/>
		<result column="DEPTH_LEVEL" property="depthLevel" jdbcType="INTEGER"/>
		<result column="IS_DELETED" property="isDeleted" jdbcType="INTEGER"/>
		<result column="DESCR" property="descr" jdbcType="VARCHAR"/>
		<result column="GUID_ID" property="guidId" jdbcType="VARCHAR"/>
		<result column="IS_EFFECTIVE" property="isEffective" jdbcType="INTEGER"/>
		<result column="EFFECTIVE_DATE_START" property="effectiveDateStart" jdbcType="TIMESTAMP"/>
		<result column="EFFECTIVE_DATE_END" property="effectiveDateEnd" jdbcType="TIMESTAMP"/>
		<result column="CREATED_ON" property="createdOn" jdbcType="TIMESTAMP"/>
		<result column="CREATED_BY" property="createdBy" jdbcType="VARCHAR"/>
		<result column="MODIFIED_ON" property="modifiedOn" jdbcType="TIMESTAMP"/>
		<result column="MODIFIED_BY" property="modifiedBy" jdbcType="VARCHAR"/>
		<result column="DESC_FLEX_FIELD1" property="descFlexField1" jdbcType="VARCHAR"/>
		<result column="DESC_FLEX_FIELD2" property="descFlexField2" jdbcType="VARCHAR"/>
		<result column="DESC_FLEX_FIELD3" property="descFlexField3" jdbcType="VARCHAR"/>
		<result column="DESC_FLEX_FIELD4" property="descFlexField4" jdbcType="VARCHAR"/>
		<result column="DESC_FLEX_FIELD5" property="descFlexField5" jdbcType="VARCHAR"/>
		<result column="DESC_FLEX_FIELD6" property="descFlexField6" jdbcType="VARCHAR"/>
	</resultMap>

    <!-- 列定义 -->
	<sql id="userGroupDepartmentsColumns">
	  t.USER_GROUP_ID,
	  t.DEPARTMENT_ID
  	</sql>

    <!-- 查询条件SQL -->
	<sql id="whereColumnBySelect">
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<if test="userGroupId != null">
				AND t.USER_GROUP_ID = #{userGroupId}
			</if>
			<if test="departmentId != null">
				AND t.DEPARTMENT_ID = #{departmentId}
			</if>
		</trim>
	</sql>

    <!-- 修改字段SQL -->
	<sql id="whereColumnByUpdate">
		<trim prefix="SET" suffixOverrides=",">
			<if test="userGroupId != null">
			t.USER_GROUP_ID = #{userGroupId},
			</if>
			<if test="departmentId != null">
			t.DEPARTMENT_ID = #{departmentId},
			</if>
		</trim>
	</sql>

    <!-- 根据主键ID获取数据 -->
	<select id="get" parameterType="com.xinri.po.user.UserGroupDepartments" resultMap="userGroupDepartmentsResultMap">
		SELECT <include refid="userGroupDepartmentsColumns" /> 
		FROM USER_GROUP_DEPARTMENTS t 
		WHERE t.USER_GROUP_ID = #{userGroupId}
	</select>
    <!-- 查询列表可以根据分页进行查询 -->
	<select id="findList" parameterType="com.xinri.po.user.UserGroupDepartments" resultMap="userGroupDepartmentsResultMap">
		SELECT
		<include refid="userGroupDepartmentsColumns" /> 
		FROM USER_GROUP_DEPARTMENTS t 
		<include refid="whereColumnBySelect" />
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}			
			</when>
				<otherwise>
				ORDER BY t.USER_GROUP_ID DESC
				</otherwise>
			
		</choose>
	</select>

    <!-- 查询所有列表 -->
	<select id="findAllList" parameterType="com.xinri.po.user.UserGroupDepartments" resultMap="userGroupDepartmentsResultMap">
		SELECT
		<include refid="userGroupDepartmentsColumns" /> 
		FROM USER_GROUP_DEPARTMENTS t 	
		<include refid="whereColumnBySelect" />
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}			
			</when>
				<otherwise>
				ORDER BY  t.ID DESC
				</otherwise>
			
		</choose>
		
		
	</select>

    <!-- 根据条件查询对象 -->
	<select id="getByEntity" parameterType="com.xinri.po.user.UserGroupDepartments" resultMap="userGroupDepartmentsResultMap">
		SELECT <include refid="userGroupDepartmentsColumns" /> 
		FROM USER_GROUP_DEPARTMENTS t 
		<include refid="whereColumnBySelect"></include>
	</select>
	
    <!-- 新增并设置主键ID至参数对象 -->
	<insert id="insert" parameterType="com.xinri.po.user.UserGroupDepartments">

		INSERT INTO USER_GROUP_DEPARTMENTS
			(USER_GROUP_ID, DEPARTMENT_ID)
		VALUES
			(#{userGroupId}, #{departmentId})
	</insert>
    <!-- 新增并设置主键ID判断哪些列不为空时，则进行插入 -->
	<insert id="insertSelective" parameterType="com.xinri.po.user.UserGroupDepartments" useGeneratedKeys="true" keyProperty="id" >
		
	    INSERT INTO USER_GROUP_DEPARTMENTS
	    <trim prefix="(" suffix=")" suffixOverrides="," >
			<if test="userGroupId != null">
				USER_GROUP_ID,
			</if>
			<if test="departmentId != null">
				DEPARTMENT_ID,
			</if>
	    </trim>
	    <trim prefix="values (" suffix=")" suffixOverrides="," >
		  <if test="userGroupId != null">
				#{userGroupId,jdbcType=BIGINT},
		  </if>
		  <if test="departmentId != null">
				#{departmentId,jdbcType=BIGINT},
		  </if>
	    </trim>
  	</insert>

    <!-- 根据主键ID进行修改 -->
  	<update id="update" parameterType="com.xinri.po.user.UserGroupDepartments">
		UPDATE USER_GROUP_DEPARTMENTS t 
		<include refid="whereColumnByUpdate"></include>
		<where>
			t.USER_GROUP_ID = #{userGroupId,jdbcType=BIGINT}
		</where>
	</update>

    <!-- 根据条件进行修改 -->
	<update id="updateByCondition" parameterType="com.xinri.po.user.UserGroupDepartments">
		UPDATE USER_GROUP_DEPARTMENTS t 
		<include refid="whereColumnByUpdate"></include>
		<where>${whereSqlParam}</where>
	</update>

    <!-- 根据主键ID进行逻辑删除 -->
	<update id="delete" parameterType="com.xinri.po.user.UserGroupDepartments">
		UPDATE USER_GROUP_DEPARTMENTS t SET 
		t.IS_DELETED = 1
		WHERE t.USER_GROUP_ID = #{userGroupId,jdbcType=BIGINT}
	</update>

    <!-- 根据主键ID进行批量逻辑删除 -->
	<update id="batchDelete" parameterType="java.util.List">
		UPDATE USER_GROUP_DEPARTMENTS t SET 
		t.IS_DELETED = 1
		WHERE t.USER_GROUP_ID IN
		<foreach item="item" collection="list" index="index" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</update>

    <!-- 根据条件进行逻辑删除 -->
	<update id="deleteByEntity" parameterType="com.xinri.po.user.UserGroupDepartments">
		UPDATE USER_GROUP_DEPARTMENTS t SET 
			t.IS_DELETED = 1
		<include refid="whereColumnBySelect"/>
	</update>

    <!-- 根据主键ID进行物理删除 -->
	<delete id="remove" parameterType="com.xinri.po.user.UserGroupDepartments">
		DELETE FROM USER_GROUP_DEPARTMENTS t 
		WHERE t.USER_GROUP_ID = #{userGroupId,jdbcType=BIGINT}
	</delete>

    <!-- 根据主键ID进行批量物理删除 -->
	<delete id="batchRemove" parameterType="java.util.List">
		DELETE FROM USER_GROUP_DEPARTMENTS t 
		WHERE t.USER_GROUP_ID IN
		<foreach item="item" collection="list" index="index" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</delete>

    <!-- 根据条件进行物理删除 -->
	<update id="removeByCondition" parameterType="com.xinri.po.user.UserGroupDepartments">
		DELETE FROM USER_GROUP_DEPARTMENTS t 
		<where>${whereSqlParam}</where>
	</update>

	<!-- 根据用户组id 获取所属部门 -->
	<select id="getDepartmentByUserGroupsId" parameterType="com.xinri.po.departments.Departments" resultMap="departmentsResultMap">
		SELECT * FROM DEPARTMENTS t
		<where>
			<if test="name != null">
				AND  t.NAME =#{name,jdbcType=VARCHAR}
			</if>
			<if test="code != null">
				AND  t.CODE =#{code,jdbcType=VARCHAR}
			</if>
			<if test="descr != null">
				AND  t.DESCR =#{descr,jdbcType=VARCHAR}
			</if>
			AND  t.IS_DELETED = 0
-- 			AND  t.IS_EFFECTIVE = 1
			<if test="roleId != null">
				AND t.ID IN(SELECT DEPARTMENT_ID FROM USER_GROUP_DEPARTMENTS WHERE USER_GROUP_ID =#{roleId,jdbcType=BIGINT} AND IS_DELETED = 0)
			</if>
		</where>
	</select>

	<!-- 根据用户组id 获取不属于用户组的部门-->
	<select id="getNotDepartmentByUserGroupsId" parameterType="com.xinri.po.departments.Departments" resultMap="departmentsResultMap">
		SELECT * FROM DEPARTMENTS t
		<where>
			<if test="name != null">
				AND  t.NAME =#{name,jdbcType=VARCHAR}
			</if>
			<if test="code != null">
				AND  t.CODE =#{code,jdbcType=VARCHAR}
			</if>
			<if test="descr != null">
				AND  t.DESCR =#{descr,jdbcType=VARCHAR}
			</if>
			AND  t.IS_DELETED = 0
-- 			AND  t.IS_EFFECTIVE = 1
			<if test="roleId != null">
				AND t.ID NOT IN(SELECT DEPARTMENT_ID FROM USER_GROUP_DEPARTMENTS WHERE USER_GROUP_ID =#{roleId,jdbcType=BIGINT} AND IS_DELETED = 0)
			</if>
		</where>
	</select>

</mapper>